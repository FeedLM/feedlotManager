/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import domain.ParametrosProperties;
import static domain.ParametrosProperties.getLicencia;
import static domain.ParametrosProperties.guardarProperties;
import static domain.ParametrosProperties.setAsignarFecha_ultima_corrida;
import static domain.Seguridad.equipoValido;
import static domain.Seguridad.fecha_instalacion;
import static domain.Seguridad.fecha_limite;
import static domain.Seguridad.fecha_ultima_corrida;
import static domain.Seguridad.licencia;
import static domain.Seguridad.validaUltimaCorrida;
import static domain.Seguridad.validar_fecha_ultima_corrida_periodo_prueba;
import java.awt.Image;
import java.awt.Toolkit;
import java.io.BufferedReader;
import java.io.File;
import java.io.InputStreamReader;
import static java.lang.Thread.sleep;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author sperez
 */
public class Splash extends javax.swing.JFrame implements Runnable {

    Thread t;
    public static Integer porcentaje;
    private static Integer maxProgressBar;
    public static SimpleDateFormat formatoDateTime;
    public static SimpleDateFormat formatoDateTime_1;
    public static SimpleDateFormat formatoDateTime_11;
    public static SimpleDateFormat formatoDateTime_2;
    public static SimpleDateFormat formatoDateTime_21;
    public static SimpleDateFormat formatoDateTime3;
    public static SimpleDateFormat formatoDate;

    public static Integer valorProgressBar;

    /**
     * Creates new form splash
     */
    public Splash() {
        initComponents();
        this.setLocationRelativeTo(null);
        /*
         ImageIcon fot = (ImageIcon) jLabel3.getIcon();
         Icon icono = new ImageIcon(fot.getImage().getScaledInstance(jLabel3.getWidth(), jLabel3.getHeight(), Image.SCALE_DEFAULT));
         jLabel3.setIcon(icono);
         */
        logo1.cargar();
        fondo1.cargar(this.getSize());
        this.logoTruTest1.cargar();
        this.setVisible(true);
        formatoDateTime = new SimpleDateFormat("yyyy-MM-dd HH:mm");
        formatoDateTime_1 = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        formatoDateTime_11 = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss aa");
        
        formatoDateTime_2 = new SimpleDateFormat("dd/MM/yyyy HH:mm");
        formatoDateTime_21 = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
        formatoDateTime3 = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss aa"); 
        
        
        formatoDate = new SimpleDateFormat("yyyy-MM-dd");

        if (aplicacion_corriendo("feedlot_manager.exe")) {

            System.out.println("feedlot_manager ya esta corriendo");
            System.exit(0);
        }
        maxProgressBar = 100;

        this.jProgressBar1.setMaximum(maxProgressBar);        
        
        Image i = null;
        i = Toolkit.getDefaultToolkit().getImage(getClass().getResource("/resources/logo tru-test.png"));
        setIconImage(i);
        
        this.setVisible(true);
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        logoTruTest1 = new abstractt.LogoTruTest();
        logo1 = new abstractt.Logo();
        jProgressBar1 = new javax.swing.JProgressBar();
        jLabel1 = new javax.swing.JLabel();
        jl_Licencia = new javax.swing.JLabel();
        fondo1 = new abstractt.fondo();
        jl_mensaje = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximizedBounds(new java.awt.Rectangle(0, 0, 5000, 5000));
        setUndecorated(true);
        setResizable(false);
        addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                formFocusGained(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(null);

        logoTruTest1.setText("logoTruTest1");
        jPanel1.add(logoTruTest1);
        logoTruTest1.setBounds(10, 190, 140, 50);

        logo1.setText("logo1");
        jPanel1.add(logo1);
        logo1.setBounds(380, 10, 110, 50);

        jProgressBar1.setMaximum(10000);
        jProgressBar1.setValue(50);
        jPanel1.add(jProgressBar1);
        jProgressBar1.setBounds(10, 124, 470, 14);

        jLabel1.setBackground(new java.awt.Color(0, 0, 0));
        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 9)); // NOI18N
        jLabel1.setText("FeedLot Manager V1.0.1");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(10, 110, 410, 12);

        jl_Licencia.setBackground(new java.awt.Color(255, 255, 255));
        jl_Licencia.setFont(new java.awt.Font("Tahoma", 0, 9)); // NOI18N
        jl_Licencia.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jl_Licencia.setText("Licencia: DR-564-88764");
        jPanel1.add(jl_Licencia);
        jl_Licencia.setBounds(90, 170, 390, 11);

        fondo1.setText("fondo1");
        jPanel1.add(fondo1);
        fondo1.setBounds(0, 0, 34, 14);

        jl_mensaje.setText("jLabel3");
        jPanel1.add(jl_mensaje);
        jl_mensaje.setBounds(10, 150, 34, 14);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 500, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_formFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_formFocusGained

    public boolean aplicacion_corriendo(String aplicacion) {

        Integer ll_conteo = 0;

        try {

            String line;
            Process p = Runtime.getRuntime().exec("tasklist /nh /fo csv");//.exe");//  /fo csv /nh");
            BufferedReader input = new BufferedReader(new InputStreamReader(p.getInputStream()));

            while ((line = input.readLine()) != null) {
                if (!line.trim().equals("")) {

                    // System.out.println(line);
                    // keep only the process name
                    line = line.substring(1);

                    if ((line.substring(0, line.indexOf("\"")).toString()).equals(aplicacion)) {

                        ll_conteo++;

                        if (ll_conteo > 1) {

                            return true;
                        }
                    }
                }
            }
        } catch (Exception err) {

            err.printStackTrace();
        }

        return false;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
        
         "Metal"
         "Nimbus"
        
         */

        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Splash.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Splash.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Splash.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Splash.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        //</editor-fold>
        Splash splash;
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Splash.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Splash.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Splash.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Splash.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        crearCarpetaTempFiles();

        splash = new Splash();
        splash.setVisible(true);
        splash.cargar();

    }

    public static void crearCarpetaTempFiles() {

        File folder = new File("tempfiles");
        folder.mkdirs();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private abstractt.fondo fondo1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private static javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JLabel jl_Licencia;
    private static javax.swing.JLabel jl_mensaje;
    private abstractt.Logo logo1;
    private abstractt.LogoTruTest logoTruTest1;
    // End of variables declaration//GEN-END:variables
    public static String titulo_mensaje;

    public static void setTituloMensaje(String mensaje) {

        titulo_mensaje = mensaje;
        jl_mensaje.setText(titulo_mensaje);
    }

    public static void setMensaje(String mensaje) {

        jl_mensaje.setText(titulo_mensaje + ": " + mensaje);
    }

    public static void setPorcentaje(Integer aPorcentaje) {

        porcentaje = aPorcentaje;

        try {

            sleep(100);

        } catch (InterruptedException ex) {
            Logger.getLogger(Splash.class.getName()).log(Level.SEVERE, null, ex);
        }

        valorProgressBar = (porcentaje * maxProgressBar) / 100;

        jProgressBar1.setValue(valorProgressBar);
    }

    private boolean validarDat() {

        //   cifrado.validarExistenciaDAT();
        return true;
    }

    public boolean cargar() {

        setTituloMensaje("Leyendo Archivo de Propedades");
        if (!cargarProperties()) {
            JOptionPane.showMessageDialog(this, "El Archivo de Propiedades No Existe");
            //Abre Generador de DATS
            generador_dat();
            System.exit(0);
        }

        setTituloMensaje("Validando Licencia");
        licencia();

        setPorcentaje(20);

        jl_Licencia.setText("LICENCIA: " + getLicencia());

        setTituloMensaje("Validando Equipo");
        if (!equipoValido()) {

            JOptionPane.showMessageDialog(this, "PC no autorizada a ejecutar FeedLotManager");

            //Abre Generador de DATS
            generador_dat();
            System.exit(0);
        }
        setPorcentaje(30);

        setTituloMensaje("Validando Fecha de Instalación");
        fecha_instalacion();
        setPorcentaje(40);

        setTituloMensaje("Validando Fecha Limite");
        fecha_limite();
        setPorcentaje(50);

        setTituloMensaje("Validando Fecha Ultima Corrida");
        fecha_ultima_corrida();
        setPorcentaje(60);

        setTituloMensaje("Validando Fecha Actual Ultima Corrida");

        if (!validaUltimaCorrida()) {

            JOptionPane.showMessageDialog(this, "Se modifico fecha de Registro... No se permite correr FeedLotManager");
            //Abre Generador de DATS
            setAsignarFecha_ultima_corrida(false);

            generador_dat();
            System.exit(0);
        }
        setPorcentaje(80);

        setTituloMensaje("Validando Periodo de Licencia");
        if (!validar_fecha_ultima_corrida_periodo_prueba()) {

            JOptionPane.showMessageDialog(this, "Se Termino el Periodo de Licencia");
            //Abre Generador de DATS
            generador_dat();
            System.exit(0);
        }
        setPorcentaje(100);

        //Aplicar Cambios Properties
        guardarProperties();

        Login dialog = null;
        try {
            dialog = new Login(new javax.swing.JFrame(), true);

            // sleep(1000);
        } catch (SQLException ex) {
            Logger.getLogger(Splash.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Splash.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(Splash.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(Splash.class.getName()).log(Level.SEVERE, null, ex);
        }

        this.dispose();
        dialog.setVisible(true);

        return true;
    }

    public void generador_dat() {
        guardarProperties();

        licencias = new Licencias(this, true);
        licencias.setVisible(true);
    }

    Licencias licencias;

    @Override
    public void run() {

        try {

            int i = 0;

            do {

                porcentaje = (i * 100) / maxProgressBar;

                if (porcentaje == 0) {
                    setTituloMensaje("Leyendo Archivo de Propedades");
                    cargarProperties();

                }

                t.sleep(100);
                this.jProgressBar1.setValue(i);
                i += 1;

            } while ((i <= maxProgressBar) && (valorProgressBar < 100));

            Login dialog = null;
            try {
                dialog = new Login(new javax.swing.JFrame(), true);
            } catch (SQLException ex) {
                Logger.getLogger(Splash.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(Splash.class.getName()).log(Level.SEVERE, null, ex);
            } catch (InstantiationException ex) {
                Logger.getLogger(Splash.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IllegalAccessException ex) {
                Logger.getLogger(Splash.class.getName()).log(Level.SEVERE, null, ex);
            }

            this.dispose();
            dialog.setVisible(true);

        } catch (InterruptedException ex) {
            Logger.getLogger(Splash.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    public boolean cargarProperties() {

        return ParametrosProperties.leerProperties();
    }

}

