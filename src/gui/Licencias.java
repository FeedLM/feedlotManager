/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import domain.Cifrado;
import static domain.ParametrosProperties.getLicencia;
import static domain.Seguridad.obtenerIdDisco;
import java.awt.Image;
import java.awt.Toolkit;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import static java.nio.file.StandardCopyOption.REPLACE_EXISTING;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author Home
 */
public class Licencias extends javax.swing.JDialog {

    /**
     * Creates new form Licencias
     */
    public Licencias(java.awt.Frame parent, boolean Modal) {
        super(parent);
        this.setModal(Modal);

        initComponents();

        Image i = null;
        i = Toolkit.getDefaultToolkit().getImage(getClass().getResource("/resources/logo tru-test.png"));
        setIconImage(i);

        fondo1.cargar(this.getSize());

        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        btn_cargarArchivo = new abstractt.Boton();
        bnt_crearArchivo = new abstractt.Boton();
        etiqueta1 = new abstractt.Etiqueta();
        fondo1 = new abstractt.fondo();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btn_cargarArchivo.setText("Cargar Archivo");
        btn_cargarArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_cargarArchivoActionPerformed(evt);
            }
        });
        jPanel1.add(btn_cargarArchivo, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 110, 150, 30));

        bnt_crearArchivo.setText("Crear Archivo");
        bnt_crearArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bnt_crearArchivoActionPerformed(evt);
            }
        });
        jPanel1.add(bnt_crearArchivo, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 110, 150, 30));

        etiqueta1.setBackground(new java.awt.Color(95, 84, 88));
        etiqueta1.setForeground(new java.awt.Color(230, 225, 195));
        etiqueta1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        etiqueta1.setText("Licencias FeedLotManager");
        etiqueta1.setFont(new java.awt.Font("Trebuchet", 1, 24)); // NOI18N
        etiqueta1.setOpaque(true);
        jPanel1.add(etiqueta1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 500, 60));

        fondo1.setText("fondo1");
        jPanel1.add(fondo1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 500, 200));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bnt_crearArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bnt_crearArchivoActionPerformed

        guardarDatRuta();
        JOptionPane.showMessageDialog(this, "Envíe el Archivo DAT a Soporte Técnico TruTest para validar licencia FeedLotManager");

    }//GEN-LAST:event_bnt_crearArchivoActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        eliminarDAT();
    }//GEN-LAST:event_formWindowClosing

    private void btn_cargarArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_cargarArchivoActionPerformed
        cargarDAT();
    }//GEN-LAST:event_btn_cargarArchivoActionPerformed

    private void guardarDatRuta() {

        crearArchivoLicencias();

        JFileChooser jFileChooser = new JFileChooser();
        jFileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        jFileChooser.showOpenDialog(this);

        String rutaDestino;

        rutaDestino = jFileChooser.getSelectedFile().getAbsolutePath();

        System.out.println("Guardar en " + rutaDestino);

        String archivoOrigen, archivoDestino;

        archivoOrigen = archivoProperties + ".dat";

        // File source = new File(archivoOrigen);
        File dest = new File(archivoOrigen);

        Path source = Paths.get(archivoOrigen);
        Path destination = Paths.get(rutaDestino + "\\" + dest.getName());

        try {

            Files.copy(source, destination, REPLACE_EXISTING);
        } catch (IOException e) {

            e.printStackTrace();
        }

        /**/
        Runtime r = Runtime.getRuntime();
        Process p = null;

        try {
            p = r.exec("explorer.exe " + rutaDestino);
        } catch (Exception e) {
            System.out.println("Error al ejecutar");
        }
        /**/

    }

    public void cargarDAT() {

        JFileChooser jFileChooser = new JFileChooser();
        jFileChooser.showOpenDialog(this);

        File archivoDatOrigen, archivoDatDestino;

        archivoDatOrigen = jFileChooser.getSelectedFile();
        archivoDatDestino = new File(System.getProperty("user.dir") + "\\feedLotManager.dat");

        Path source = archivoDatOrigen.toPath();
        Path destination = archivoDatDestino.toPath();

        try {

            Files.copy(source, destination, REPLACE_EXISTING);
        } catch (IOException e) {

            e.printStackTrace();
        }

    }

    private void eliminarDAT() {
        File file_properties;
        //Eliminar Properties
        file_properties = new File(archivoProperties + ".dat");

        if (file_properties.delete()) {

            System.out.println("El dat ha sido borrado satisfactoriamente");
        } else {

            System.out.println(archivoProperties + ".dat no puede ser borrado");
        }
    }

    String archivoProperties;

    public void crearArchivoLicencias() {

        String cadenaProperties;

        Cifrado cifrado;
        Properties properties = new Properties();

        archivoProperties = System.getProperty("user.dir") + "\\tempfiles\\feedLotManager";

        cifrado = new Cifrado(archivoProperties);
        properties = cifrado.leerProperties();

        properties.setProperty("disco_duro", obtenerIdDisco());

        properties.setProperty("licencia", getLicencia());
        properties.setProperty("fecha_instalacion", "");
        properties.setProperty("fecha_ultima_corrida", "");
        properties.setProperty("fecha_limite", "");
        properties.setProperty("muestraSQL", "S");
        properties.setProperty("database", "feedLotManager");

        FileOutputStream fos;

        try {

            File file = new File(archivoProperties + ".properties");
            fos = new FileOutputStream(file);

            properties.store(fos, null);

            properties.clear();
            fos.close();

        } catch (FileNotFoundException ex) {

            Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {

            Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
        }

        String letras_decodificadas = "", letras_codificadas = "";
        //Leer properties en  letras_decodificadas
        letras_decodificadas = Cifrado.leerPropertiesString();

        //Codificar letras_decodificadas en letras_codificadas
        letras_codificadas = Cifrado.codifica(letras_decodificadas);

        //Guardar en dat
        Cifrado.guardarDat(letras_codificadas);

        File file_properties;
        //Eliminar Properties
        file_properties = new File(archivoProperties + ".properties");

        if (file_properties.delete()) {

            System.out.println("El properties ha sido borrado satisfactoriamente");
        } else {

            System.out.println(archivoProperties + ".properties no puede ser borrado");
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private abstractt.Boton bnt_crearArchivo;
    private abstractt.Boton btn_cargarArchivo;
    private abstractt.Etiqueta etiqueta1;
    private abstractt.fondo fondo1;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
